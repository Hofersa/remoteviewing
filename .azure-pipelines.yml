variables:
  # At the moment, we're building from git master.  This version has better support for (cross-)compiling
  # for Windows.
  # When 0.9.13 is released, we can probably start building off released versions.
  LIBVNC_VERSION: "0.9.13"

jobs:

- job: native_macos
  variables:
    rid: osx-x64
  pool:
    vmImage: 'macOS-10.15'
  steps:
  - script: |
      dotnet tool install --tool-path . nbgv
      ./nbgv cloud -a
    displayName: Set build number
  - script: |
      git clone --depth 1 --branch LibVNCServer-$(LIBVNC_VERSION) https://github.com/LibVNC/libvncserver/
      git show
    displayName: Clone LibVNCServer
  - script: |
      mkdir build
      cd build
      cmake -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=$(Build.ArtifactStagingDirectory)/$(rid) -DWITH_OPENSSL=OFF -DWITH_GCRYPT=OFF -DWITH_GNUTLS=OFF ../libvncserver/
    displayName: Configure LibVNC
  - script: |
      cmake --build .
      make install
    workingDirectory: build
    displayName: Compile LibVNC
  - script: |
      gcc -o $(Build.ArtifactStagingDirectory)/$(rid)/get_offsets -I . -I ../libvncserver/ -I ../libvncserver/common/ $(Build.SourcesDirectory)/RemoteViewing.LibVnc/get_offsets.c
      $(Build.ArtifactStagingDirectory)/$(rid)/get_offsets > $(Build.ArtifactStagingDirectory)/$(rid)/get_offsets.txt
    workingDirectory: build
  - script : |
      mkdir build
      cd build
      cmake ..
      make
      cp *.dylib $(Build.ArtifactStagingDirectory)/$(rid)/lib/
    workingDirectory: '$(Build.SourcesDirectory)/RemoteViewing.LibVnc.Logging'
    displayName: Build vnclogger
  - script : |
      cp /usr/local/opt/jpeg/lib/libjpeg.9.dylib .
      cp /usr/local/opt/libpng/lib/libpng16.16.dylib .

      install_name_tool -change /usr/local/opt/jpeg/lib/libjpeg.9.dylib @loader_path/libjpeg.9.dylib libvncserver.dylib
      install_name_tool -change /usr/local/opt/libpng/lib/libpng16.16.dylib @loader_path/libpng16.16.dylib libvncserver.dylib

      otool -L libvncserver.dylib
    workingDirectory: '$(Build.ArtifactStagingDirectory)/$(rid)/lib'
    displayName: Copy additional dependencies
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: libvnc
    displayName: Publish LibVNC

- job: native_windows
  strategy:
    maxParallel: 2
    matrix: 
      x86:
        arch: Win32
        rid: win7-x86
        triplet: x86-windows
      x64:
        arch: x64
        rid: win7-x64
        triplet: x64-windows
  pool:
    vmImage: windows-2019
  steps:
  - script: |
      git clone --branch LibVNCServer-$(LIBVNC_VERSION) --depth 1 https://github.com/LibVNC/libvncserver/
      git show
    displayName: Clone LibVNCServer
  - task: Cache@2
    inputs:
      key: 'vcpkg_downloads | $(triplet)'
      path: "C:/vcpkg/downloads"
    displayName: Cache VCPKG downloads
  - task: Cache@2
    inputs:
      key: 'vcpkg_installed | $(triplet)'
      path: "C:/vcpkg/installed"
    displayName: Cache VCPKG installed packages
  - script: |
      %VCPKG_INSTALLATION_ROOT%\vcpkg.exe version
      %VCPKG_INSTALLATION_ROOT%\vcpkg.exe install libpng:$(triplet)
      %VCPKG_INSTALLATION_ROOT%\vcpkg.exe install zlib:$(triplet)
      %VCPKG_INSTALLATION_ROOT%\vcpkg.exe install libjpeg-turbo:$(triplet)
    displayName: Install dependencies
  - script: |
      mkdir build
      cd build
      cmake -DCMAKE_TOOLCHAIN_FILE=%VCPKG_INSTALLATION_ROOT%/scripts/buildsystems/vcpkg.cmake -DBUILD_SHARED_LIBS=ON -DWITH_OPENSSL=OFF -DWITH_GCRYPT=OFF -DWITH_GNUTLS=OFF -DCMAKE_INSTALL_PREFIX=$(Build.ArtifactStagingDirectory)/$(rid) ../libvncserver/ -A $(arch)
    displayName: Configure LibVNC
  - script: |
      cmake --build . --target vncserver --config Release
    workingDirectory: build
    displayName: Compile LibVNC
  - script: |
      mkdir $(Build.ArtifactStagingDirectory)\$(rid)\
      copy Release\*.* $(Build.ArtifactStagingDirectory)\$(rid)\
    workingDirectory: build
    displayName: Install LibVNC
  - script : |
      mkdir build
      cd build
      cmake ..
      cmake --build . --config Release
      copy Release\*.* $(Build.ArtifactStagingDirectory)\$(rid)\
    workingDirectory: '$(Build.SourcesDirectory)/RemoteViewing.LibVnc.Logging'
    displayName: Build vnclogger
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)/'
      artifactName: libvnc
    displayName: Publish LibVNC

- job: native_linux_x64
  pool:
    vmImage: ubuntu-20.04
  variables:
    rid: linux-x64
  container:
    image: ubuntu:20.04
    options: "--name ci-container -v /usr/bin/docker:/tmp/docker:ro"
  steps:
  - script: |
      /tmp/docker exec -t -u 0 ci-container \
      sh -c "apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confold" -y install sudo"
    displayName: Set up sudo
  - script: |
      sudo DEBIAN_FRONTEND=noninteractive apt-get install -y libvncserver-dev gcc clang cmake
      
      mkdir -p $(Build.ArtifactStagingDirectory)/$(rid)
      gcc -o $(Build.ArtifactStagingDirectory)/$(rid)/get_offsets -I . -I .. $(Build.SourcesDirectory)/RemoteViewing.LibVnc/get_offsets.c
      $(Build.ArtifactStagingDirectory)/$(rid)/get_offsets > $(Build.ArtifactStagingDirectory)/$(rid)/get_offsets.txt
  - script : |
      mkdir build
      cd build
      cmake ..
      make
      cp *.so $(Build.ArtifactStagingDirectory)/$(rid)/
    workingDirectory: '$(Build.SourcesDirectory)/RemoteViewing.LibVnc.Logging'
    displayName: Build vnclogger
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: libvnc
    displayName: Publish LibVNC

- job: build
  pool:
    vmImage: 'windows-latest'
  dependsOn:
  - native_windows
  - native_macos
  - native_linux_x64
  steps:
  - task: DownloadBuildArtifacts@0
    inputs:
      artifactName: libvnc
    # Apparently code coverage isn't really supposed to work, but it should work soon. Sigh.
    # https://github.com/microsoft/azure-pipelines-tasks/issues/11677
    # https://github.com/microsoft/azure-pipelines-tasks/issues/9954
  - script: |
      set PATH=$(System.ArtifactsDirectory)/libvnc/win7-x64/;%PATH%
      echo %PATH%
      mkdir $(Build.ArtifactStagingDirectory)/nuget
      dotnet test RemoteViewing.sln
    workingDirectory: '$(Build.SourcesDirectory)/'
    displayName: Test
  - script: |
      mkdir $(Build.ArtifactStagingDirectory)/nuget
      dotnet pack -c Release -o $(Build.ArtifactStagingDirectory)/nuget
    displayName: 'Package'
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)/nuget'
      artifactName: remoteviewing-$(Build.BuildNumber)
    condition: true

- job: test_linux_x64
  pool:
    vmImage: ubuntu-20.04
  dependsOn:
  - native_windows
  - native_macos
  - native_linux_x64
  container:
    image: mcr.microsoft.com/dotnet/sdk:5.0-focal
    options: "--name ci-container -v /usr/bin/docker:/tmp/docker:ro"
  steps:
  - script: |
      /tmp/docker exec -t -u 0 ci-container \
      sh -c "apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confold" -y install sudo"
    displayName: Set up sudo
  - script: |
      sudo DEBIAN_FRONTEND=noninteractive apt-get install -y libvncserver1 libturbojpeg libgdiplus
  - task: DownloadBuildArtifacts@0
    inputs:
      artifactName: libvnc
  - script: |
      export LD_LIBRARY_PATH=$(System.ArtifactsDirectory)/libvnc/linux-x64/:$LD_LIBRARY_PATH
      echo $LD_LIBRARY_PATH
      dotnet test RemoteViewing.sln

- job: test_osx
  pool:
    vmImage: 'macOS-10.15'
  dependsOn:
  - native_windows
  - native_macos
  - native_linux_x64
  steps:
  - task: DownloadBuildArtifacts@0
    inputs:
      artifactName: libvnc
  - script: |
      brew install mono-libgdiplus
    displayName: Install libgdiplus
  - script: |
      export DYLD_LIBRARY_PATH=$(System.ArtifactsDirectory)/libvnc/osx-x64/lib/:$DYLD_LIBRARY_PATH
      echo $DYLD_LIBRARY_PATH
      mkdir $(Build.ArtifactStagingDirectory)/nuget
      dotnet test RemoteViewing.sln
